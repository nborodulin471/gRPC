// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transport/msg.proto

package msg

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	To                   string   `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_f756c5da054eb28f, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Request) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Reply struct {
	Recd                 bool     `protobuf:"varint,1,opt,name=recd,proto3" json:"recd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f756c5da054eb28f, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetRecd() bool {
	if m != nil {
		return m.Recd
	}
	return false
}

func init() {
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Reply)(nil), "Reply")
}

func init() { proto.RegisterFile("transport/msg.proto", fileDescriptor_f756c5da054eb28f) }

var fileDescriptor_f756c5da054eb28f = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x29, 0x4a, 0xcc,
	0x2b, 0x2e, 0xc8, 0x2f, 0x2a, 0xd1, 0xcf, 0x2d, 0x4e, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57,
	0xd2, 0xe5, 0x62, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2, 0xe3, 0x62, 0x2a, 0xc9,
	0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0x2a, 0xc9, 0x17, 0x12, 0xe2, 0x62, 0x29, 0x49,
	0xad, 0x28, 0x91, 0x60, 0x02, 0x8b, 0x80, 0xd9, 0x4a, 0xd2, 0x5c, 0xac, 0x41, 0xa9, 0x05, 0x39,
	0x95, 0x20, 0xc9, 0xa2, 0xd4, 0xe4, 0x14, 0xb0, 0x72, 0x8e, 0x20, 0x30, 0xdb, 0xc8, 0x8d, 0x8b,
	0x07, 0x6a, 0x16, 0x44, 0x8d, 0x04, 0x17, 0x4b, 0x70, 0x6a, 0x5e, 0x8a, 0x10, 0x87, 0x1e, 0x54,
	0x58, 0x8a, 0x4d, 0x0f, 0x22, 0x23, 0xc3, 0xc5, 0x11, 0x94, 0x5a, 0x52, 0x94, 0x99, 0x5a, 0x96,
	0x8a, 0x29, 0x9b, 0xc4, 0x06, 0x76, 0x9a, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x23, 0x2f, 0xab,
	0x94, 0xb1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RequestReplyClient is the client API for RequestReply service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RequestReplyClient interface {
	Send(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	Retrieve(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type requestReplyClient struct {
	cc *grpc.ClientConn
}

func NewRequestReplyClient(cc *grpc.ClientConn) RequestReplyClient {
	return &requestReplyClient{cc}
}

func (c *requestReplyClient) Send(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/RequestReply/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestReplyClient) Retrieve(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/RequestReply/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestReplyServer is the server API for RequestReply service.
type RequestReplyServer interface {
	Send(context.Context, *Request) (*Reply, error)
	Retrieve(context.Context, *Request) (*Reply, error)
}

// UnimplementedRequestReplyServer can be embedded to have forward compatible implementations.
type UnimplementedRequestReplyServer struct {
}

func (*UnimplementedRequestReplyServer) Send(ctx context.Context, req *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedRequestReplyServer) Retrieve(ctx context.Context, req *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}

func RegisterRequestReplyServer(s *grpc.Server, srv RequestReplyServer) {
	s.RegisterService(&_RequestReply_serviceDesc, srv)
}

func _RequestReply_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestReplyServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RequestReply/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestReplyServer).Send(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestReply_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestReplyServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RequestReply/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestReplyServer).Retrieve(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _RequestReply_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RequestReply",
	HandlerType: (*RequestReplyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _RequestReply_Send_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _RequestReply_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/msg.proto",
}
